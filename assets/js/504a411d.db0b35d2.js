"use strict";(self.webpackChunkhaithong_194=self.webpackChunkhaithong_194||[]).push([[8151],{1920:(n,e,i)=>{i.d(e,{A:()=>t});const t=i.p+"assets/images/trait_bound-8c1b8e6802d7c5804d3b0790e311abfc.svg"},3397:(n,e,i)=>{i.d(e,{A:()=>t});const t=i.p+"assets/images/trait_object-fafd2ade3c1eb97cad31bd24f7238faa.svg"},4405:(n,e,i)=>{i.d(e,{A:()=>t});const t=i.p+"assets/images/static_n_dynamic_dispatch-ca8f9dfb224a9601a96b019f00704800.svg"},8304:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"rust/trai_bound_and_dispatching/trai_bound_and_dispatching","title":"trai_bound_and_dispatching","description":"Trait bound","source":"@site/docs/rust/trai_bound_and_dispatching/trai_bound_and_dispatching.md","sourceDirName":"rust/trai_bound_and_dispatching","slug":"/rust/trai_bound_and_dispatching/","permalink":"/docs/rust/trai_bound_and_dispatching/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rust/trai_bound_and_dispatching/trai_bound_and_dispatching.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Send & Sync Trait","permalink":"/docs/rust/send_sync/"}}');var r=i(4848),s=i(8453);const a={},c=void 0,d={},o=[{value:"Trait bound",id:"trait-bound",level:3},{value:"Static dispatching",id:"static-dispatching",level:3},{value:"Using generic data types",id:"using-generic-data-types",level:4},{value:"Using imp Trait",id:"using-imp-trait",level:4},{value:"Pros &amp; Cons",id:"pros--cons",level:4},{value:"Dynamic dispatching",id:"dynamic-dispatching",level:3},{value:"Pros &amp; Cons",id:"pros--cons-1",level:4},{value:"Example",id:"example",level:3}];function l(n){const e={a:"a",code:"code",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h3,{id:"trait-bound",children:"Trait bound"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Trait is not a type."}),"\n",(0,r.jsx)(e.li,{children:"Trait is a bound on type."}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-rust",children:"struct Bar;\r\ntrait Foo {\r\n    fn foo();\r\n}\r\nimpl Foo for Bar {...}\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{alt:"trait_bound.svg",src:i(1920).A+"",title:"trait bound data type",width:"162",height:"162"})}),"\n",(0,r.jsx)(e.p,{children:"Dispatching is how we pass a value, which implement trait, to a function?"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"At runtime, do we know the data type of passed value or not?"}),"\n",(0,r.jsx)(e.li,{children:"The value is known size, or un-known size?"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"Normally, we might write a prototype like bellow, but it not correct in Rust."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-rust",children:"// Compiler doesn't know which struct impl Foo will be passed in\r\n// -> doesn't know size of params\r\nfn my_func(foo: Foo) {      // Wrong: Foo is a trait, not a type\r\n    ...\r\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"There are 2 ways in contrast for dispatching:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Static dispatching"}),"\n",(0,r.jsx)(e.li,{children:"Dynamic dispatching"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"static-dispatching",children:"Static dispatching"}),"\n",(0,r.jsx)(e.h4,{id:"using-generic-data-types",children:"Using generic data types"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-rust",children:"// pass by value\r\nfn my_func<T : Foo> (t : T) {}\r\n// pass by reference\r\nfn my_func<T : Foo> (t : &T) {}\r\n// pass by Boxed reference\r\nfn my_func<T : Foo> (t : Box<T>) {}\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["When to use:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"when have two params, and both have same Data type.\r\nBecause the data type must be determined at compile time."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"using-imp-trait",children:"Using imp Trait"}),"\n",(0,r.jsx)(e.p,{children:"This way is the same as using generic data types."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-rust",children:"// pass by value\r\nfn my_func(t: impl Foo) {}\r\n// pass by reference\r\nfn my_func(t: &impl Foo) {}\r\n// pass by boxed reference\r\nfn my_func(t: Box<impl Foo>) {}\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["When to use:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"exactly same as Using generic data types"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"pros--cons",children:"Pros & Cons"}),"\n",(0,r.jsx)(e.p,{children:"Pros:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"The data type is known at compile time."}),"\n",(0,r.jsx)(e.li,{children:"Member function of data type will be call directly"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"Cons:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Rust uses monomorphization to perform Generic static dispatching.\r\nIt means, in case of using generic data types, if we use my_func() for several concrete types, rust will create several version of my_func() corresponding to each data type."}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-rust",children:"struct Bar;\r\nimpl Foo for Bar {...}\r\n\r\nstruct Bazzz;\r\nimpl Foo for Bazzz {...}\r\n\r\nlet bar Bar;\r\nlet bazzz = Bazzz;\r\n\r\nmy_func(bar)\r\n// my_func_bar(t: Bar), a version of my_func for Bar, will be used instead of my_func\r\n\r\nmy_func(bazzz)\r\n// my_func_bazzz(t: Bazzz), a version of my_func for Bazzz, will be used instead of my_func\n"})}),"\n",(0,r.jsx)(e.h3,{id:"dynamic-dispatching",children:"Dynamic dispatching"}),"\n",(0,r.jsx)(e.p,{children:"Passing by Trait object.\r\nTrait object is a refrence to instance of data type implemented the trait."}),"\n",(0,r.jsx)(e.p,{children:"Trait object actually is a fat-pointer, which contains 2 child pointers:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Pointer to data"}),"\n",(0,r.jsx)(e.li,{children:"Pointer to vTable, which indirectly point to member function of data type."}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-rust",children:"pub struct TraitObject {\r\n    pub data: *mut (),      // raw pointer to void (unsafe)\r\n    pub vtable: *mut (),\n"})}),"\n",(0,r.jsxs)(e.p,{children:["Ref: ",(0,r.jsx)(e.a,{href:"https://doc.rust-lang.org/1.8.0/std/raw/struct.TraitObject.html",children:"Trait Object"})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{alt:"trait_object.svg",src:i(3397).A+"",title:"Memory map of Trait Object",width:"443",height:"382"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-rust",children:"fn my_func(t : &dyn Foo)    // dyn ~ dynamic dispatch\r\nfn my_func(t : &Foo)        // coercing\r\nfn my_func(t : Box<Foo>)    // smart pointer\n"})}),"\n",(0,r.jsx)(e.h4,{id:"pros--cons-1",children:"Pros & Cons"}),"\n",(0,r.jsx)(e.p,{children:"Pros:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Can bring up Polymorphism feature."}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"Cons:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Member function will be call in-directly (2 times de-reference)"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-rust",children:"struct Honda {\r\n    name: String,\r\n    size: i32,\r\n    weight: i32,\r\n    ...\r\n}\r\n\r\ntrait VehicleAction {\r\n    fn drive()(&self);\r\n}\r\n\r\nimpl VehicleAction for Honda {\r\n    fn drive(&self) {...};\r\n}\r\n\r\n// Static dispatch\r\nfn drive_vehicle_static(vehicle: &impl VehicleAction) {\r\n    vehicle.drive();\r\n}\r\n\r\n// dynamic dispatch\r\nfn drive_vehicle_dynamic(vehicle: &dyn VehicleAction) {\r\n    vehicle.drive();\r\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{alt:"static_n_dynamic_dispatch.svg",src:i(4405).A+"",title:"static_n_dynamic_dispatch",width:"598",height:"451"})})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>c});var t=i(6540);const r={},s=t.createContext(r);function a(n){const e=t.useContext(s);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:a(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);