"use strict";(self.webpackChunkhaithong_194=self.webpackChunkhaithong_194||[]).push([[8491],{1291:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>d,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"rust/send_sync/send_sync","title":"Send & Sync Trait","description":"Send and Sync are too traits which used to mark a data type.","source":"@site/docs/rust/send_sync/send_sync.md","sourceDirName":"rust/send_sync","slug":"/rust/send_sync/","permalink":"/docs/rust/send_sync/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rust/send_sync/send_sync.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"pinning","permalink":"/docs/rust/pinning/"},"next":{"title":"trai_bound_and_dispatching","permalink":"/docs/rust/trai_bound_and_dispatching/"}}');var a=t(4848),i=t(8453);const d={},r="Send & Sync Trait",c={},o=[{value:"What is Sync",id:"what-is-sync",level:3},{value:"What is Send",id:"what-is-send",level:3}];function h(e){const n={h1:"h1",h3:"h3",header:"header",img:"img",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"send--sync-trait",children:"Send & Sync Trait"})}),"\n",(0,a.jsx)(n.p,{children:"Send and Sync are too traits which used to mark a data type."}),"\n",(0,a.jsx)(n.h3,{id:"what-is-sync",children:"What is Sync"}),"\n",(0,a.jsx)(n.p,{children:"A Data type marked as Sync means:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Multiple threads can use it at same time."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"sync.svg",src:t(7324).A+"",width:"323",height:"322"})}),"\n",(0,a.jsx)(n.h3,{id:"what-is-send",children:"What is Send"}),"\n",(0,a.jsx)(n.p,{children:"A Data type marked as Send means:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"data can be moved from a thread to another thread."}),"\n",(0,a.jsx)(n.li,{children:"Or, multiple threads have chance to hold it. But at a point of time, only one thread uses it."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"send.svg",src:t(2692).A+"",width:"303",height:"243"})}),"\n",(0,a.jsx)(n.p,{children:"Ofcouse Sync is Send.\r\nBut Send is not Sync."})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},2692:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/send-aced3a7f1026bc8dce41acb3bf155127.svg"},7324:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/sync-a90e56111b07a49dbf82b06f5d42262e.svg"},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>r});var s=t(6540);const a={},i=s.createContext(a);function d(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);