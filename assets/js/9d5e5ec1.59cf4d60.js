"use strict";(self.webpackChunkhaithong_194=self.webpackChunkhaithong_194||[]).push([[252],{8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>u});var s=a(6540);const t={},i=s.createContext(t);function r(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(i.Provider,{value:n},e.children)}},8594:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"rust/enums/enums","title":"Enums","description":"Enum in Rust is not just a number that we used to know in some programming languages like C/C++, Java, Js, ...","source":"@site/docs/rust/enums/enums.md","sourceDirName":"rust/enums","slug":"/rust/enums/","permalink":"/docs/rust/enums/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rust/enums/enums.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"SQLX","permalink":"/docs/rust/database/sqlx"},"next":{"title":"Lifetimes","permalink":"/docs/rust/lifetime/"}}');var t=a(4848),i=a(8453);const r={},u="Enums",c={},l=[{value:"1. Enum in C/C++",id:"1-enum-in-cc",level:2},{value:"1.1. Enum",id:"11-enum",level:3},{value:"1.2. Union",id:"12-union",level:3},{value:"1.3. Tagged union",id:"13-tagged-union",level:3}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"enums",children:"Enums"})}),"\n",(0,t.jsx)(n.p,{children:"Enum in Rust is not just a number that we used to know in some programming languages like C/C++, Java, Js, ..."}),"\n",(0,t.jsx)(n.p,{children:"In Rust, enum is Tagged-Union which provides more usages than just a number."}),"\n",(0,t.jsx)(n.p,{children:"Let's take a look at what is tagged-union, then discover some extra usages that Rust provides with Enum."}),"\n",(0,t.jsx)(n.h2,{id:"1-enum-in-cc",children:"1. Enum in C/C++"}),"\n",(0,t.jsx)(n.h3,{id:"11-enum",children:"1.1. Enum"}),"\n",(0,t.jsx)(n.p,{children:"Each enum value is just a 4 bytes integer value.\r\nIt's often used to mark a number with a more meaning full text."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-C",children:"enum Level {\r\n  LOW,      // 0\r\n  MEDIUM,   // 1\r\n  HIGH      // 2\r\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"12-union",children:"1.2. Union"}),"\n",(0,t.jsx)(n.p,{children:"Union value can be different data types.\r\nEach value has size of the biggest union member."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-C",children:"union CarName {\r\n    char charName,  // use a character as a name\r\n    int intName,    // use a number as a name\r\n    char *strName,  // use a string as a name\r\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Union is a kind of dangerous feature in C. Because we must remember the data type.\r\nFor example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-C",children:'    union CarName my_car;\r\n    print("Car name: %s", my_car.intName); // incorrect\n'})}),"\n",(0,t.jsx)(n.h3,{id:"13-tagged-union",children:"1.3. Tagged union"}),"\n",(0,t.jsx)(n.p,{children:"Tagged union is like a combination of Enum and Union."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-C",children:"struct TaggedUnion {\r\n\r\n    int tag;            // indicate the type of _value\r\n\r\n    union CarName {\r\n        char charName,  // use a character as a name\r\n        int intName,    // use a number as a name\r\n        char *strName,  // use a string as a name\r\n    } _value;\r\n\r\n} value;\n"})}),"\n",(0,t.jsx)(n.p,{children:"To use tagged union:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-C",children:'if (value.tag == 0) {\r\n    printf("Car name is a character: %c", value._value.charname);\r\n}\r\nelse if (value.tag ==  ...) {\r\n    ...\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"It alows writing a user-defined type that:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Has a tag to indicate which data type it belong to."}),"\n",(0,t.jsx)(n.li,{children:"values of same tagged-union type have same size (the biggest)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Advantage:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"have cheking -> more safety."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Disadvantage:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"still have to remember the data type."}),"\n",(0,t.jsx)(n.li,{children:"the checking might have to cover alot of cases."}),"\n"]}),"\n",(0,t.jsx)(n.h1,{id:"2-enum-in-rust",children:"2. Enum in Rust"}),"\n",(0,t.jsx)(n.p,{children:"In Rust, enum is implemented as tagged-union."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"enum MyEnum {\r\n    ENumber(i32),\r\n    EString(String),\r\n    ETupple(i32, i32, i32, i32),\r\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Tunnel encapsulation",src:a(9251).A+"",title:"Tunnel encapsulation",width:"272",height:"361"})}),"\n",(0,t.jsx)(n.p,{children:"Size of an enum is the size of tag pluse size of biggest member."}),"\n",(0,t.jsxs)(n.p,{children:["Ref: ",(0,t.jsx)(n.a,{href:"/docs/rust/memory_layout/#Enum",children:"Enum section"})]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},9251:(e,n,a)=>{a.d(n,{A:()=>s});const s=a.p+"assets/images/tagged_union-18e654e32ecbce9fc488e930d3aaa316.svg"}}]);