"use strict";(self.webpackChunkhaithong_194=self.webpackChunkhaithong_194||[]).push([[3774],{1596:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"rust/axum/handler","title":"Handler","description":"What is Handler","source":"@site/docs/rust/axum/handler.md","sourceDirName":"rust/axum","slug":"/rust/axum/handler","permalink":"/docs/rust/axum/handler","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rust/axum/handler.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Extractor","permalink":"/docs/rust/axum/extractor"},"next":{"title":"\\\\#[Derive Clone]","permalink":"/docs/rust/clone/derive_clone"}}');var s=r(4848),a=r(8453);const l={},o="Handler",i={},c=[{value:"What is Handler",id:"what-is-handler",level:3},{value:"Extractor",id:"extractor",level:3},{value:"How Handler takes various amount of Extractor",id:"how-handler-takes-various-amount-of-extractor",level:3}];function T(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"handler",children:"Handler"})}),"\n",(0,s.jsx)(n.h3,{id:"what-is-handler",children:"What is Handler"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Arcording to Axum doccument, Handler is:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"An async function"}),"\n",(0,s.jsx)(n.li,{children:"take zero or more extractors"}),"\n",(0,s.jsx)(n.li,{children:"return sth that can be converted into a Response"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"extractor",children:"Extractor"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Extractor is a type which implements ",(0,s.jsx)(n.em,{children:"FromRequestParts"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"There are several usefull extractors:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Params"}),"\n",(0,s.jsx)(n.li,{children:"Path"}),"\n",(0,s.jsx)(n.li,{children:"Json"}),"\n",(0,s.jsx)(n.li,{children:"State"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"We can also write our custom extractor:"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"how-handler-takes-various-amount-of-extractor",children:"How Handler takes various amount of Extractor"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Axum use a macro like ",(0,s.jsx)(n.a,{href:"https://github.com/tokio-rs/axum/blob/15917c6dbcb4a48707a20e9cfd021992a279a662/axum-core/src/macros.rs#L231",title:"github link",children:"all_the_tuples"})," to automatically implement Handler trait for any function which:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"take zero ->> 16 extractors."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The last extractor must implement ",(0,s.jsx)(n.em,{children:"FromRequest"})," trait"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The other extractor must implement ",(0,s.jsx)(n.em,{children:"FromRequestParts"})," trait"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The last extractor can be used to extract the Body part of a request. Or, you must place the body extractor as the last argument of a Handler."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[rustfmt::skip]\r\nmacro_rules! all_the_tuples {\r\n    ($name:ident) => {\r\n        $name!([], T1);\r\n        $name!([T1], T2);\r\n        $name!([T1, T2], T3);\r\n        $name!([T1, T2, T3], T4);\r\n        $name!([T1, T2, T3, T4], T5);\r\n        $name!([T1, T2, T3, T4, T5], T6);\r\n        $name!([T1, T2, T3, T4, T5, T6], T7);\r\n        $name!([T1, T2, T3, T4, T5, T6, T7], T8);\r\n        $name!([T1, T2, T3, T4, T5, T6, T7, T8], T9);\r\n        $name!([T1, T2, T3, T4, T5, T6, T7, T8, T9], T10);\r\n        $name!([T1, T2, T3, T4, T5, T6, T7, T8, T9, T10], T11);\r\n        $name!([T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11], T12);\r\n        $name!([T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12], T13);\r\n        $name!([T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13], T14);\r\n        $name!([T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14], T15);\r\n        $name!([T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15], T16);\r\n    };\r\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"macro_rules! impl_handler {\r\n    (\r\n        [$($ty:ident),*], $last:ident\r\n    ) => {\r\n        #[allow(non_snake_case, unused_mut)]\r\n        impl<F, Fut, S, Res, M, $($ty,)* $last> Handler<(M, $($ty,)* $last,), S> for F\r\n        where\r\n            F: FnOnce($($ty,)* $last,) -> Fut + Clone + Send + Sync + 'static,\r\n            Fut: Future<Output = Res> + Send,\r\n            S: Send + Sync + 'static,\r\n            Res: IntoResponse,\r\n            $( $ty: FromRequestParts<S> + Send, )*\r\n            $last: FromRequest<S, M> + Send,\r\n        {\r\n            type Future = Pin<Box<dyn Future<Output = Response> + Send>>;\r\n\r\n            fn call(self, req: Request, state: S) -> Self::Future {\r\n                Box::pin(async move {\r\n                    let (mut parts, body) = req.into_parts();\r\n                    let state = &state;\r\n\r\n                    $(\r\n                        let $ty = match $ty::from_request_parts(&mut parts, state).await {\r\n                            Ok(value) => value,\r\n                            Err(rejection) => return rejection.into_response(),\r\n                        };\r\n                    )*\r\n\r\n                    let req = Request::from_parts(parts, body);\r\n\r\n                    let $last = match $last::from_request(req, state).await {\r\n                        Ok(value) => value,\r\n                        Err(rejection) => return rejection.into_response(),\r\n                    };\r\n\r\n                    let res = self($($ty,)* $last,).await;\r\n\r\n                    res.into_response()\r\n                })\r\n            }\r\n        }\r\n    };\r\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(T,{...e})}):T(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>o});var t=r(6540);const s={},a=t.createContext(s);function l(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);