"use strict";(self.webpackChunkhaithong_194=self.webpackChunkhaithong_194||[]).push([[7746],{3842:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>a});const l=JSON.parse('{"id":"rust/clone/derive_clone","title":"\\\\#[Derive Clone]","description":"[Derive Clone]","source":"@site/docs/rust/clone/derive_clone.md","sourceDirName":"rust/clone","slug":"/rust/clone/derive_clone","permalink":"/docs/rust/clone/derive_clone","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rust/clone/derive_clone.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Handler","permalink":"/docs/rust/axum/handler"},"next":{"title":"closure","permalink":"/docs/rust/closure/"}}');var o=r(4848),t=r(8453);const s={},c="#[Derive Clone]",i={},a=[{value:"What the macro does",id:"what-the-macro-does",level:3},{value:"Implementation for normal type",id:"implementation-for-normal-type",level:3},{value:"Implementation for Generric type",id:"implementation-for-generric-type",level:3}];function d(e){const n={code:"code",em:"em",h1:"h1",h3:"h3",header:"header",li:"li",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"derive-clone",children:"#[Derive Clone]"})}),"\n",(0,o.jsx)(n.h3,{id:"what-the-macro-does",children:"What the macro does"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Automatically implement Clone trait for a type"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"implementation-for-normal-type",children:"Implementation for normal type"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"What we write:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:"#[derive(Clone)]\r\nstruct Foo {\r\n    a: u32\r\n}\r\n\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"can be translated to:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:"impl Clone for Foo {\r\n  fn clone(&self) -> Self {\r\n    Foo {\r\n      a: self.a.clone(),\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"implementation-for-generric-type",children:"Implementation for Generric type"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"What we write:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:"#[derive(Clone)]\r\nstruct Foo <T> {\r\n    a: Rc<T>\r\n}\r\n\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"can be translated to:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:"impl<T: ::core::clone::Clone> ::core::clone::Clone for Foo<T> {\r\n  #[inline]\r\n  fn clone(&self) -> Foo<B, C> {\r\n    match *self {\r\n      Foo {\r\n        a: ref __self_0_0,\r\n      } => Foo {\r\n        a: ::core::clone::Clone::clone(&(*__self_0_0)),\r\n      },\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Thing to notice for generic type is that:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["event ",(0,o.jsx)(n.em,{children:"RC<T>"})," can guarantee to be clonable for any type ",(0,o.jsx)(n.em,{children:"T"})]}),"\n",(0,o.jsxs)(n.li,{children:["but, the type ",(0,o.jsx)(n.em,{children:"T"})," should also implement Clone too"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:"impl<T: ::core::clone::Clone> ::core::clone::Clone for Foo<T>\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>c});var l=r(6540);const o={},t=l.createContext(o);function s(e){const n=l.useContext(t);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),l.createElement(t.Provider,{value:n},e.children)}}}]);