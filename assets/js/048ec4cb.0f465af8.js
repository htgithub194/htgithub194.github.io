"use strict";(self.webpackChunkhaithong_194=self.webpackChunkhaithong_194||[]).push([[5960],{606:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/qemu_nodes-16ad292eb7e68a56b59c204a6bb3b300.svg"},1909:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"networking/qemu_network/qemu","title":"QEMU cluster","description":"* Goal 1: Create and connect multiple Qemu nodes","source":"@site/docs/networking/qemu_network/qemu.md","sourceDirName":"networking/qemu_network","slug":"/networking/qemu_network/qemu","permalink":"/docs/networking/qemu_network/qemu","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/networking/qemu_network/qemu.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Docker Networking","permalink":"/docs/networking/docker_network/images/docker_network"},"next":{"title":"Tunnel","permalink":"/docs/networking/tunnel/"}}');var l=r(4848),t=r(8453);const i={},a="QEMU cluster",d={},o=[{value:"Goal 1: Create and connect multiple Qemu nodes",id:"goal-1-create-and-connect-multiple-qemu-nodes",level:2},{value:"boot Qemu node using alpine image",id:"boot-qemu-node-using-alpine-image",level:3},{value:"create Overlay image",id:"create-overlay-image",level:3},{value:"using <code>screen</code> to store QEMU consoles",id:"using-screen-to-store-qemu-consoles",level:3},{value:"connect multiple QEMU nodes",id:"connect-multiple-qemu-nodes",level:3},{value:"create netns node inside QEMU",id:"create-netns-node-inside-qemu",level:3},{value:"Goal 2: Create and connect multiple netns inside Qemu nodes",id:"goal-2-create-and-connect-multiple-netns-inside-qemu-nodes",level:2},{value:"install iproute2",id:"install-iproute2",level:3},{value:"create netns",id:"create-netns",level:3},{value:"create and connect netns(s) from multiple Qemu nodes",id:"create-and-connect-netnss-from-multiple-qemu-nodes",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"qemu-cluster",children:"QEMU cluster"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Goal 1: Create and connect multiple Qemu nodes"}),"\n",(0,l.jsx)(n.li,{children:"Goal 2: Create and connect multiple netns inside Qemu nodes"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"goal-1-create-and-connect-multiple-qemu-nodes",children:"Goal 1: Create and connect multiple Qemu nodes"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"qemu cluster",src:r(606).A+""})}),"\n",(0,l.jsx)(n.h3,{id:"boot-qemu-node-using-alpine-image",children:"boot Qemu node using alpine image"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"# create virtual disk\r\nqemu-img create -f qcow2 alpine.qcow2 1G\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"# boot from iso image\r\n# `-boot d` means boot from cdrom\r\nqemu-system-x86_64 \\\r\n  -boot d \\\r\n  -cdrom alpine-standard-3.22.0-x86_64.iso \\\r\n  -m 512 \\\r\n  -hda alpine.backing.qcow2 \\\r\n  -nographic \\\r\n  -enable-kvm\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"# boot from backing file\r\n# `-boot c` means boot from disk\r\nqemu-system-x86_64 \\\r\n  -boot c \\\r\n  -m 512 \\\r\n  -hda alpine.backing.qcow2 \\\r\n  -nographic \\\r\n  -enable-kvm\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Note:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["must run ",(0,l.jsx)(n.code,{children:"setup-alpine"})," in order to install bootable disk"]}),"\n",(0,l.jsxs)(n.li,{children:["chose ",(0,l.jsx)(n.code,{children:"sda"})," -> ",(0,l.jsx)(n.code,{children:"sys"})," -> (y) for erasing the disk"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"create-overlay-image",children:"create Overlay image"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"# create overlay image\r\nqemu-img create -f qcow2 -b alpine.backing.qcow2 -F qcow2 alpine.overlay.img\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"# boot from overlay image\r\nqemu-system-x86_64 \\\r\n  -m 512 \\\r\n  -hda alpine.overlay.img \\\r\n  -enable-kvm \\\r\n  -boot c \\\r\n  -nographic\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"using-screen-to-store-qemu-consoles",children:["using ",(0,l.jsx)(n.code,{children:"screen"})," to store QEMU consoles"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"# create session\r\nscreen -S qemu\r\n#\r\n# boot from overlay\r\n#\r\n\r\n# detach: Ctrl + A, then D\r\n\r\n# attach: \r\nscreen -r qemu\r\n\n"})}),"\n",(0,l.jsx)(n.h3,{id:"connect-multiple-qemu-nodes",children:"connect multiple QEMU nodes"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"# create bridge\r\nsudo ip link add name br0 type bridge\r\nsudo ip addr add 192.168.100.1/24 dev br0\r\nsudo ip link set br0 up\r\n\r\n# config iptables for br0\r\niptables -I FORWARD -p all -i br0 -j ACCEPT\r\niptables -I INPUT -p all -i br0 -j ACCEPT\r\niptables -I OUTPUT -p all -o br0 -j ACCEPT\r\n\r\n# create tap device\r\nsudo ip tuntap add dev tap0 mode tap user $USER\r\nsudo ip link set tap0 master br0\r\nsudo ip link set tap0 up\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"# boot from overlay & plugin the tap\r\nqemu-system-x86_64 \\\r\n  -m 512 \\\r\n  -hda alpine.overlay.qcow2 \\\r\n  -netdev tap,id=net0,ifname=tap0,script=no,downscript=no \\\r\n  -device e1000,netdev=net0 \\\r\n  -enable-kvm \\\r\n  -nographic\r\n\r\n# setup interface \r\n# Interface: eth0\r\n# IP: 192.168.100.10\r\n# Gateway: 192.168.100.1\r\nsetup-interfaces\r\n\r\n# assign ip \r\nip addr add 192.168.100.10/24 dev eth0\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Note:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"MAC address is auto generated"}),"\n",(0,l.jsxs)(n.li,{children:["E.g: ",(0,l.jsx)(n.code,{children:"52:54:00:12:34:56"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["where ",(0,l.jsx)(n.code,{children:"52:54:00"})," is Qemu prefix"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"create-netns-node-inside-qemu",children:"create netns node inside QEMU"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"# another overlay image for netns\r\nqemu-img create -f qcow2 -b alpine.overlay.qcow2 -F qcow2 alpine.overlay.tap0.qcow2\r\nqemu-img create -f qcow2 -b alpine.overlay.qcow2 -F qcow2 alpine.overlay.tap1.qcow2\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Create multiple qemu node"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"# node 0\r\nqemu-system-x86_64 \\\r\n-m 512 \\\r\n-hda alpine.overlay.tap0.qcow2 \\\r\n-netdev tap,id=net0,ifname=tap0,script=no,downscript=no \\\r\n-device e1000,netdev=net0,mac=52:54:00:00:00:01 \\\r\n-enable-kvm \\\r\n-nographic\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"# node 1\r\n\r\n# create tap1 device\r\nsudo ip tuntap add dev tap1 mode tap user $USER\r\nsudo ip link set tap1 master br0\r\nsudo ip link set tap1 up\r\n\r\n# boot node 1\r\nqemu-system-x86_64 \\\r\n-m 512 \\\r\n-hda alpine.overlay.tap1.qcow2 \\\r\n-netdev tap,id=net1,ifname=tap1,script=no,downscript=no \\\r\n-device virtio-net-pci,netdev=net1,mac=52:54:00:00:00:02 \\\r\n-enable-kvm \\\r\n-nographic\r\n\r\n# change ip address to 192.168.100.20\r\nvi /etc/network/interfaces\r\nservice networking restart\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Now we have 2 Qemu nodes.","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Node 0 with IP 192.168.100.10"}),"\n",(0,l.jsx)(n.li,{children:"Node 1 with IP 192.168.100.20"}),"\n",(0,l.jsxs)(n.li,{children:["2 Nodes connect with brigde ",(0,l.jsx)(n.code,{children:"br0"})," via tap devices"]}),"\n",(0,l.jsx)(n.li,{children:"2 Nodes can ping eachother"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"# from node 0\r\nlocalhost:~# ip addr show eth0\r\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP 0\r\n    link/ether 52:54:00:00:00:01 brd ff:ff:ff:ff:ff:ff\r\n    inet 192.168.100.10/24 scope global eth0\r\n       valid_lft forever preferred_lft forever\r\n    inet6 fe80::5054:ff:fe00:1/64 scope link \r\n       valid_lft forever preferred_lft forever\r\nlocalhost:~# ping 192.168.100.20\r\nPING 192.168.100.20 (192.168.100.20): 56 data bytes\r\n64 bytes from 192.168.100.20: seq=0 ttl=64 time=0.259 ms\r\n64 bytes from 192.168.100.20: seq=1 ttl=64 time=0.288 ms\r\n64 bytes from 192.168.100.20: seq=2 ttl=64 time=0.287 ms\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"# from node 1\r\nlocalhost:~# ip a show eth0\r\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP 0\r\n    link/ether 52:54:00:00:00:02 brd ff:ff:ff:ff:ff:ff\r\n    inet 192.168.100.20/24 scope global eth0\r\n       valid_lft forever preferred_lft forever\r\n    inet6 fe80::5054:ff:fe00:2/64 scope link \r\n       valid_lft forever preferred_lft forever\r\nlocalhost:~# ping 192.168.100.20\r\nPING 192.168.100.20 (192.168.100.20): 56 data bytes\r\n64 bytes from 192.168.100.20: seq=0 ttl=64 time=0.030 ms\r\n64 bytes from 192.168.100.20: seq=1 ttl=64 time=0.035 ms\r\n64 bytes from 192.168.100.20: seq=2 ttl=64 time=0.035 ms\n"})}),"\n",(0,l.jsx)(n.h2,{id:"goal-2-create-and-connect-multiple-netns-inside-qemu-nodes",children:"Goal 2: Create and connect multiple netns inside Qemu nodes"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"qemu cluster",src:r(5383).A+""})}),"\n",(0,l.jsx)(n.h3,{id:"install-iproute2",children:"install iproute2"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["The iproute2 package in base ISO image does not provide ",(0,l.jsx)(n.code,{children:"netns"})," option."]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["So, we will download the full version of iproute2 from ",(0,l.jsx)(n.a,{href:"https://dl-cdn.alpinelinux.org/alpine/edge/main/x86_64/",children:"alpine CDN"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"  # download package\r\n  wget https://dl-cdn.alpinelinux.org/alpine/edge/main/x86_64/libelf-0.193-r0.apk\r\n  wget https://dl-cdn.alpinelinux.org/alpine/edge/main/x86_64/libmnl-1.0.5-r2.apk\r\n  wget https://dl-cdn.alpinelinux.org/alpine/edge/main/x86_64/iproute2-minimal-6.15.0-r0.apk\r\n  wget https://dl-cdn.alpinelinux.org/alpine/edge/main/x86_64/ifupdown-ng-iproute2-0.12.1-r7.apk\r\n  wget https://dl-cdn.alpinelinux.org/alpine/edge/main/x86_64/libxtables-1.8.11-r1.apk\r\n  wget https://dl-cdn.alpinelinux.org/alpine/edge/main/x86_64/iproute2-tc-6.15.0-r0.apk\r\n  wget https://dl-cdn.alpinelinux.org/alpine/edge/main/x86_64/iproute2-ss-6.15.0-r0.apk\r\n  wget https://dl-cdn.alpinelinux.org/alpine/edge/main/x86_64/iproute2-6.15.0-r0.apk\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"# move to Node0\r\nscp *.apk root@192.168.100.10:/root\r\n\r\n# \r\nssh root@192.168.100.10\r\napk add --allow-untrusted ./*.apk\r\n\r\n# now `ip netns` is ready to use\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"create-netns",children:"create netns"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Setting up netns like this:"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"qemu cluster",src:r(8095).A+""})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:'# Configuration\r\nPHY_IF="eth0"\r\nNET1="ns1"\r\nNET2="ns2"\r\nIP1="192.168.100.11/24"\r\nIP2="192.168.100.12/24"\r\nGW="192.168.100.1"\r\n\r\n# Enable IP forwarding\r\necho 1 > /proc/sys/net/ipv4/ip_forward\r\n\r\n# Create network namespaces\r\nip netns add $NET1\r\nip netns add $NET2\r\n\r\n# Create macvlan interfaces linked to $PHY_IF\r\nip link add macvlan1 link $PHY_IF type macvlan mode bridge\r\nip link add macvlan2 link $PHY_IF type macvlan mode bridge\r\n\r\n# Assign interfaces to namespaces\r\nip link set macvlan1 netns $NET1\r\nip link set macvlan2 netns $NET2\r\n\r\n# Bring up interfaces inside namespaces\r\nip netns exec $NET1 ip addr add $IP1 dev macvlan1\r\nip netns exec $NET2 ip addr add $IP2 dev macvlan2\r\nip netns exec $NET1 ip link set dev macvlan1 up\r\nip netns exec $NET2 ip link set dev macvlan2 up\r\n\r\n# loopback up\r\nip netns exec $NET1 ip link set lo up\r\nip netns exec $NET2 ip link set lo up\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Note 1. Why macvlan?"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"by default, netns does not have a MAC address"}),"\n",(0,l.jsx)(n.li,{children:"So, we create a macvlan interface and move it into netns"}),"\n",(0,l.jsx)(n.li,{children:"Kernel give macvlan interface an unique MAC address"}),"\n",(0,l.jsxs)(n.li,{children:["macvlan interface is bond to ",(0,l.jsx)(n.code,{children:"eth0"})," where eth0 is ",(0,l.jsx)(n.code,{children:"tap0"}),", and ",(0,l.jsx)(n.code,{children:"tap0"})," has ",(0,l.jsx)(n.code,{children:"br0"})," as master"]}),"\n",(0,l.jsxs)(n.li,{children:["The flow of layer 2 is: netns -> macvlan interface -> ",(0,l.jsx)(n.code,{children:"tap0"})," -> ",(0,l.jsx)(n.code,{children:"br0"})]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Now the 2 netns can ping each other:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"localhost:~# ip netns exec ns1 ping 192.168.100.12\r\nPING 192.168.100.12 (192.168.100.12): 56 data bytes\r\n64 bytes from 192.168.100.12: seq=0 ttl=64 time=0.033 ms\r\n64 bytes from 192.168.100.12: seq=1 ttl=64 time=0.040 ms\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["The flow of ICMP package:\r\n",(0,l.jsx)(n.img,{alt:"qemu cluster",src:r(2214).A+""})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Because macvlan allow each netns has it's own MAC address\r\nSo, bridge ",(0,l.jsx)(n.code,{children:"br0"})," can catch ethenet package send from ",(0,l.jsx)(n.code,{children:"ns1"})," and forward it to ",(0,l.jsx)(n.code,{children:"ns2"})]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Using netcat to test the connection between 2 netns."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Using tcpdump to see the package is sent to ",(0,l.jsx)(n.code,{children:"br0"})," (192.168.100.1)\r\n",(0,l.jsx)(n.img,{alt:"test with netcat",src:r(2787).A+"",width:"1842",height:"422"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"create-and-connect-netnss-from-multiple-qemu-nodes",children:"create and connect netns(s) from multiple Qemu nodes"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"On Qemu Node2, create 2 netns the same way as we did on Qemu Node1"}),"\n",(0,l.jsxs)(n.li,{children:["Remember to change IP address of netns  to ",(0,l.jsx)(n.code,{children:".21"})," and ",(0,l.jsx)(n.code,{children:".22"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"test with netcat",src:r(9068).A+""})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Ping from netns inside Node2 to netns inside Node1"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"localhost:~# ip netns exec ns1 ip a\r\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\r\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\r\n    inet 127.0.0.1/8 scope host lo\r\n      valid_lft forever preferred_lft forever\r\n    inet6 ::1/128 scope host proto kernel_lo \r\n      valid_lft forever preferred_lft forever\r\n5: macvlan1@if2: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000\r\n    link/ether 7a:9c:73:31:91:8e brd ff:ff:ff:ff:ff:ff link-netnsid 0\r\n    inet 192.168.100.21/24 scope global macvlan1\r\n      valid_lft forever preferred_lft forever\r\n    inet6 fe80::789c:73ff:fe31:918e/64 scope link proto kernel_ll \r\n      valid_lft forever preferred_lft forever\r\nlocalhost:~# ip netns exec ns1 ping 192.168.100.11\r\nPING 192.168.100.11 (192.168.100.11): 56 data bytes\r\n64 bytes from 192.168.100.11: seq=0 ttl=64 time=0.213 ms\r\n64 bytes from 192.168.100.11: seq=1 ttl=64 time=0.382 ms\r\n64 bytes from 192.168.100.11: seq=2 ttl=64 time=0.318 \n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["We can also use ",(0,l.jsx)(n.code,{children:"netcat"})," to let netns inside Node1 talks to netns inside Node2"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"This setup allow the cluster to be able to scale-up"}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},2214:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/qemu_nodes_netns_1_flow-1caca254387d2a82d459f9121a7f75f8.svg"},2787:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/qemu_nodes_netns_1_test_nc-fdc9ad7962d942ac5e4f673708d83fab.png"},5383:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/qemu_nodes_netns-d1dbc7cd6b82303eb423eb0d0854749f.svg"},8095:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/qemu_nodes_netns_1-0acd0c00e9cc247c259e1f6754f9142a.svg"},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var s=r(6540);const l={},t=s.createContext(l);function i(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),s.createElement(t.Provider,{value:n},e.children)}},9068:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/qemu_nodes_netns_2-4925b57627d28ab34e3f23e0ee0f0602.svg"}}]);