"use strict";(self.webpackChunkhaithong_194=self.webpackChunkhaithong_194||[]).push([[8609],{1:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/service_layer-4f785df9f4f74c1ea7069791cf6ea1a0.svg"},127:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/big_infra-74a8d44a87ff9b84dcf736a6c7ad9f65.svg"},149:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/poll_ready-85e52f6cd1ce33f74bbb14855d085238.svg"},474:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/handler-87ec166d54c8dfe72c03e831f650aa12.svg"},7666:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/middleware-209476b00d81d637fddf78eec267b010.svg"},7971:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/back_pressure-bac0e547d8fac01675e25db977f71bf3.svg"},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var s=r(6540);const t={},l=s.createContext(t);function a(e){const n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(l.Provider,{value:n},e.children)}},8484:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/small_infra-0e6c6f23fe2f4107a6a23d18336b7597.svg"},9611:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"rust/axum/axum","title":"Axum","description":"Architecture overview (just what I know)","source":"@site/docs/rust/axum/axum.md","sourceDirName":"rust/axum","slug":"/rust/axum/","permalink":"/docs/rust/axum/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rust/axum/axum.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Async Await","permalink":"/docs/rust/async/"},"next":{"title":"FromRef","permalink":"/docs/rust/axum/FromRef"}}');var t=r(4848),l=r(8453);const a={},i="Axum",c={},d=[{value:"Architecture overview (just what I know)",id:"architecture-overview-just-what-i-know",level:3},{value:"Tower Service",id:"tower-service",level:3},{value:"Middleware",id:"middleware",level:3},{value:"Handler",id:"handler",level:3},{value:"State",id:"state",level:3},{value:"Back pressure",id:"back-pressure",level:3}];function o(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"axum",children:"Axum"})}),"\n",(0,t.jsx)(n.h3,{id:"architecture-overview-just-what-i-know",children:"Architecture overview (just what I know)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Axum is a Rust crate for building a web server."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Axum consist of:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:"hyper"})," for handle http protocol\r\nOr, ",(0,t.jsx)(n.em,{children:"Tonic"})," for gRPC"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:"Tokio"})," as runtime for async tasks"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:"matchit"})," for matching a request to a Route"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:"tower"})," for middleware"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Actually, tower plays a very important role in axum."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Here is the brieft overview of how a request flow inside Axum:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"big_infra",src:r(127).A+"",title:"Infrastructure of Axum",width:"883",height:"672"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"To make it more easier to understand:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"small_infra",src:r(8484).A+"",title:"Infrastructure of Axum",width:"421",height:"203"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'// example from: https://crates.io/crates/axum\r\n#[tokio::main]\r\nasync fn main() {\r\n\r\n    let app = Router::new()\r\n        .route("/", get(root))\r\n        .route("/users", post(create_user));\r\n\r\n    // run our app with hyper, listening globally on port 3000\r\n    let listener = tokio::net::TcpListener::bind("0.0.0.0:3000").await.unwrap();\r\n    axum::serve(listener, app).await.unwrap();\r\n}\r\n\r\n// handler: root\r\nasync fn root() -> &\'static str {\r\n    "Hello, World!"\r\n}\r\n\r\n// handler: create_user\r\nasync fn create_user(\r\n    Json(payload): Json<CreateUser>,\r\n) -> (StatusCode, Json<User>) {\r\n    \r\n    (StatusCode::CREATED, Json(user))\r\n\r\n}\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Qus: I do not see Service in the above code?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Ans: because Axum use Middleware or Handler which eventually be converted to Service"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"tower-service",children:"Tower Service"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Trait ",(0,t.jsx)(n.em,{children:"Service"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Turn Request ->> Response"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"pub trait Service<Request> {\r\n    \r\n    // back pressure\r\n    fn poll_ready(\r\n        &mut self,\r\n        cx: &mut Context<'_>,\r\n    ) -> Poll<Result<(), Self::Error>>;\r\n\r\n    type Future: Future<Output = Result<Self::Response, Self::Error>>;\r\n\r\n    fn call(&mut self, req: Request) -> Self::Future;\r\n}\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Trait ",(0,t.jsx)(n.em,{children:"Layer"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"To stack up Services"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"pub trait Layer<S> {\r\n    type Service;\r\n\r\nfn layer(&self, inner: S) -> Self::Service;\r\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"service_layer",src:r(1).A+"",width:"814",height:"202"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Refer: ",(0,t.jsx)(n.a,{href:"https://tokio.rs/blog/2021-05-14-inventing-the-service-trait",title:"tokio.rs",children:"Inventing the Service trait"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"middleware",children:"Middleware"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'let routes_all = Router::new()\r\n    .nest("/api", routes_apis)\r\n    .layer(middleware::map_response(logging))\r\n    .layer(middleware::from_fn_with_state(\r\n        app_state.clone(), token,\r\n    ))\r\n    .layer(CookieManagerLayer::new())\r\n\r\n\r\npub async fn token(mut req: Request<Body>, next: Next) -> Result<Response> {\r\n    // do smt\r\n    Ok(next.run(req).await)\r\n}\r\n\r\n\r\nasync fn logging(res: Response) -> Response {\r\n    // do smt\r\n    res\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"middleware",src:r(7666).A+"",width:"482",height:"640"})}),"\n",(0,t.jsx)(n.h3,{id:"handler",children:"Handler"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Handler:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"take extractors to parse Request"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"return sth that can be converted into a Response"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"2 Types of Handler:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"With STATE"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Without STATE"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"handler",src:r(474).A+"",width:"630",height:"490"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Qus: Does Axum accept all func as Handler?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Ans 1: handler must be:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Async func to return future"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"take 0 ->> 16 extractors"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"the request's body part should be extracted at the last extractor"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Ans 2: suitable func will be automatically imlp Handler trait by the macro\r\n",(0,t.jsx)(n.a,{href:"https://github.com/tokio-rs/axum/blob/15917c6dbcb4a48707a20e9cfd021992a279a662/axum-core/src/macros.rs#L231",title:"github link",children:"all_the_tuples"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"#[rustfmt::skip]\r\nmacro_rules! all_the_tuples {\r\n    ($name:ident) => {\r\n        $name!([], T1);\r\n        $name!([T1], T2);\r\n        $name!([T1, T2], T3);\r\n        $name!([T1, T2, T3], T4);\r\n        $name!([T1, T2, T3, T4], T5);\r\n        $name!([T1, T2, T3, T4, T5], T6);\r\n        $name!([T1, T2, T3, T4, T5, T6], T7);\r\n        $name!([T1, T2, T3, T4, T5, T6, T7], T8);\r\n        $name!([T1, T2, T3, T4, T5, T6, T7, T8], T9);\r\n        $name!([T1, T2, T3, T4, T5, T6, T7, T8, T9], T10);\r\n        $name!([T1, T2, T3, T4, T5, T6, T7, T8, T9, T10], T11);\r\n        $name!([T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11], T12);\r\n        $name!([T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12], T13);\r\n        $name!([T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13], T14);\r\n        $name!([T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14], T15);\r\n        $name!([T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15], T16);\r\n    };\r\n}\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Qus: Handler is a Service ?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Ans: No. But a Handler will be converted into a Service\r\n",(0,t.jsx)(n.a,{href:"https://docs.rs/axum/latest/axum/handler/trait.Handler.html#converting-handlers-into-services",title:"docs.rs/axum/latest/axum/handler",children:"Converting Handlers into Services"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Qus: How extractor work?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Ans:\r\n",(0,t.jsx)(n.a,{href:"https://github.com/tokio-rs/axum/blob/62470bd5039c4a32b4454d0ceafbbca77c0d4874/axum/src/handler/mod.rs#L206",title:"axum/src/handler/mod.rs",children:"impl_handler "})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Refer for more: ",(0,t.jsx)(n.a,{href:"/docs/rust/axum/extractor",children:"extractor"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Qus: How IntoResponse work?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Ans:\r\n",(0,t.jsx)(n.a,{href:"https://github.com/tokio-rs/axum/blob/62470bd5039c4a32b4454d0ceafbbca77c0d4874/axum-core/src/response/into_response.rs#L396",title:"axum-core/src/response/into_response.rs#L396",children:"impl_into_response"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Custom Extractor:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"\r\nstruct ExtData {}\r\n\r\nimpl <S: Send + Sync> FromRequestParts<S> for ExtData {\r\n\r\n    async fn from_request_parts(parts, _state) -> Result<Self> {\r\n        // extract data from parts & put to Self (ExtData)\r\n    }\r\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"state",children:"State"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"State is shared mutual data between services (handler/miiddleware)"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"E.g:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"2 Requests are handled by 2 Handlers."}),"\n",(0,t.jsx)(n.li,{children:"The 2 Handlers both try to get the entry to Database from State."}),"\n",(0,t.jsx)(n.li,{children:"So, the State is a kind of global data, all services has access to State."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Add State to Router:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'Struct AppState {\r\n    // ...\r\n}\r\n\r\nlet app_state = AppState {...}\r\n\r\nlet routes_all = Router::new()\r\n    .nest("/api", routes_apis)\r\n    .layer(middleware::map_response(logging))\r\n    .layer(middleware::from_fn_with_state(\r\n        app_state.clone(), token,\r\n    ))\r\n    .layer(CookieManagerLayer::new())\r\n    .with_state(app_state)\r\n    ;\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Add State Extractor to Handler:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"async fn handler_with_state_extractor(\r\n    State(state) : State<AppState>,\r\n) -> Result<> {\r\n    // handler logic\r\n}\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"How state is passed to extractor:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"// get() return MethodRouter\r\npub fn get<H, T, S>(handler: H) -> MethodRouter<S, Infallible>\r\n\r\n// MethodRouter call to Route. with State=() ???\r\nimpl<B> Service<Request<B>> for Router<()>\r\n\r\n// Route pass STATE to handler\r\npub trait Handler<T, S>\r\n\r\n// Handler pass STATE to Extractor\r\npub trait FromRequestParts<S>\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Qus: Route take State=(). What STATE actually passed to Handler?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Ans:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Actually, the concrete type of STATE is inferred from the State Extractor"}),"\n",(0,t.jsxs)(n.li,{children:["The moment you call the ",(0,t.jsx)(n.em,{children:"with_state()"}),", all Handlers so far are converted to Service right away, with the concrete State type"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"pub fn with_state<S2>(self, state: S) -> Router<S2>\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"back-pressure",children:"Back pressure"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Some Service has a limited Capacity ->> might has back pressure"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"back_pressure",src:r(7971).A+""})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"use poll_ready() to check the capacity first."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"E.g:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"If DB pool is full, return PENDDING ->> the request is pendding"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"If DB pool is avaiable, connecto DB and call next Service"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"poll_ready",src:r(149).A+""})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);